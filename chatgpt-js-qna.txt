ржирж┐рж╢рзНржЪрж┐рждржнрж╛ржмрзЗржЗ! ржирж┐ржЪрзЗ ржХрж┐ржЫрзБ ржкрзНрж░рж╛ржпрж╝ рззрзжрзж+ JavaScript ржЗржирзНржЯрж╛рж░ржнрж┐ржЙ ржкрзНрж░рж╢рзНржи ржУ рждрж╛ржжрзЗрж░ ржЙрждрзНрждрж░ (Bangla ржнрж╛рж╖рж╛рзЯ), ржЙржжрж╛рж╣рж░ржгрж╕рж╣ ржмрж░рзНржгржирж╛ ржжрж┐ржЪрзНржЫрж┐ред ржкрзБрж░рзЛ рж╕рзЗржЯ ржПржЦрж╛ржирзЗ ржкрзЛрж╕рзНржЯ ржХрж░рж╛ рж╣рж▓рзЗ ржЕржирзЗржХ ржмрзЬ рж╣ржмрзЗ, рждрж╛ржЗ ржЖржорж┐ ржХрзЯрзЗржХржЯрж┐ ржкрзНрж░ржзрж╛ржи ржзрж╛рж░рж╛рж░ ржкрзНрж░рж╢рзНржи ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░ржЫрж┐ред ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржкрж░рзЗ ржЖрж░ржУ ржкрзНрж░рж╢рзНржи ржпрзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред

---

## ЁЯФ╣ рзз. JavaScript ржХрж┐?

**ржЙрждрзНрждрж░**: JavaScript рж╣рж▓рзЛ ржПржХржЯрж┐ рж╕рзНржХрзНрж░рж┐ржкрзНржЯрж┐ржВ ржнрж╛рж╖рж╛ ржпрж╛ ржУржпрж╝рзЗржм ржкрзЗржЬрзЗ ржЗржирзНржЯрж╛рж░ржЕрзНржпрж╛ржХржЯрж┐ржн ржлрж╛ржВрж╢ржирж╛рж▓рж┐ржЯрж┐ ржпрзЛржЧ ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред ржПржЯрж┐ ржХрзНрж▓рж╛ржпрж╝рзЗржирзНржЯ-рж╕рж╛ржЗржбрзЗ (ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ) рж░рж╛ржи ржХрж░рзЗ, ржЕржержм рж╕рж╛рж░рзНржнрж╛рж░-рж╕рж╛ржЗржбрзЗржУ Node.js ржжрж┐ржпрж╝рзЗ ржЪрж▓рзЗред

**ржЙржжрж╛рж╣рж░ржг**:

```html
<button onclick="alert('Hello!')">Click me</button>
```

---

## рзи. Difference between var, let, const

**ржЙрждрзНрждрж░**:

* **var**: function-scoped, hoisting рж╣рзЯ, redeclare ржУ reassign ржЙржнрзЯржЗ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред
* **let**: block-scoped, hoisting рж╣рзЯ but temporal dead zone рж░рзЯрзЗржЫрзЗ, redeclare ржирзЯ but reassign рж╣рзЯред
* **const**: block-scoped, hoisting similar to let, redeclare & reassign ржПржХржжржо ржирзЯред рждржмрзЗ object/array ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ рждрж╛рж░ content ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function test() {
  if(true){
    var a = 1;
    let b = 2;
    const c = 3;
  }
  console.log(a); // 1
  // console.log(b); // Error: b is not defined
  // console.log(c); // Error: c is not defined
}
```

---

## рзй. JavaScript рждрзЗ closure ржХрзА?

**ржЙрждрзНрждрж░**: Closure рж╣рж▓ ржПржХржЯрж┐ function ржпрж╛рж░ context ржмрж╛ lexical scope рж░рзЗржЦрзЗ ржпрж╛рзЯтАФржпрж╛рж░ ржлрж▓рзЗ ржЕржирж╛ржирзНржп ржЬрж╛рзЯржЧрж╛рзЯ рж╕рзЗржЗ variable/function access ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function outer() {
  let count = 0;
  return function(){
    count++;
    console.log(count);
  }
}
const fn = outer();
fn(); // 1
fn(); // 2
```

---

## рзк. difference between == and ===

**ржЙрждрзНрждрж░**:

* `==` : Loose equality, type conversion ржЖржЫрзЗ
* `===`: Strict equality, type conversion ржирзЯ

**ржЙржжрж╛рж╣рж░ржг**:

```js
0 == '0';   // true
0 === '0';  // false
false == 0; // true
false === 0;// false
```

---

## рзл. Hoisting ржХрж┐?

**ржЙрждрзНрждрж░**: JavaScript execution ржкржпрж░рзНржирзНрждрзЗ declaration (var/func) ржХрзЛржбрзЗрж░ ржкрзНрж░ржержорзЗ "hoist" ржХрж░рзЗ (ржЙржарж┐рзЯрзЗ ржирзЗрзЯ), ржХрж┐ржирзНрждрзБ assignment ржирзЗржпрж╝ ржирж╛ред

**ржЙржжрж╛рж╣рж░ржг**:

```js
console.log(x); // undefined
var x = 5;
```

`x` declaration ржЖржЧрзЗ ржирзЗрзЯрж╛ рж╣рзЯрзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ assignment рждрж╛рж░ржкрж░ред

---

## рзм. IIFE тАУ Immediately Invoked Function Expression

**ржЙрждрзНрждрж░**: ржПржХржЯрж┐ function ржпрж╛ declaration-ржЗ рждрзОржХрзНрж╖ржгрж╛рзО ржХрж▓ ржХрж░рж╛ рж╣рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
(function(){
  console.log("IIFE executed");
})();
```

---

## рзн. Event delegation ржХрзА?

**ржЙрждрзНрждрж░**: ржПржХржЯрж┐ ржкржжрзНржзрждрж┐ ржпрзЗржЦрж╛ржирзЗ ржПржХржЯрж┐ parent elementтАСржП ржПржХржмрж╛рж░ event listener ржпрзЛржЧ ржХрж░рзЗ, ржЖрж░ рждрж╛рж░ржЗ childтАСржПрж░ ржЗржнрзЗржирзНржЯ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣рзЯред ржПржЯрж┐ DOM elements ржЕржирзЗржХ ржерж╛ржХрж▓рзЗ ржХрж╛рж░рзНржпржХрж░ ржУ ржорзЗржорж░рж┐ рж╕рж╛рж╢рзНрж░рзЯрзА рж╣рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
document.querySelector('#list').addEventListener('click', function(e){
  if(e.target && e.target.nodeName === 'LI') {
    console.log('Clicked:', e.target.textContent);
  }
});
```

---

## рзо. Prototypal inheritance ржХрзА?

**ржЙрждрзНрждрж░**: ржкрзНрж░рждрж┐ржЯрж┐ JS objectтАСржПрж░ ржПржХржЯрж┐ prototype ржерж╛ржХрзЗ, ржпрж╛рж░ properties ржУ methods ржУрждрзЗ тАЬinheritтАЭ ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function Person(name){
  this.name = name;
}
Person.prototype.greet = function(){
  console.log('Hello, ' + this.name);
};
let p = new Person('Rahim');
p.greet();  // Hello, Rahim
```

---

## рзп. Arrow function ржУ normal function ржП ржХрзА ржкрж╛рж░рзНржержХрзНржп?

**ржЙрждрзНрждрж░**:

1. Arrow functions `this`, `arguments`, `super`, `new.target` ржУ binding ржХрж░рзЗ ржирж╛ред
2. Arrow functions can't be used as constructors (no `new`).
3. Syntax рж╕ржВржХрзНрж╖рж┐ржкрзНрждред

**ржЙржжрж╛рж╣рж░ржг**:

```js
const add = (a, b) => a + b;
function add2(a,b){ return a+b; }
```

---

## ЁЯФЯ Promise ржХрзА? Async/Await ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?

**ржЙрждрзНрждрж░**:

* **Promise**: ржПржХржЯрж┐ object ржпрж╛ asynchronous ржЕржкрж╛рж░рзЗрж╢ржирзЗрж░ eventual value ржмрж╛ reason ржкрзНрж░ржХрж╛рж╢ ржХрж░рзЗред
* **Async/Await**: Promise syntaxтАСржХрзЗ synchronousтАСржПрж░ ржорждрзЛ рж▓рж┐ржЦрждрзЗ ржжрзЗрзЯред `async` ржлрж╛ржВрж╢ржи ржПржХржЯрж┐ Promise return ржХрж░рзЗ, ржЖрж░ `await` ржжрж┐рзЯрзЗ Promise resolve рж╣ржУрзЯрж╛ ржкрж░рзНржпржирзНржд ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function fetchData(){
  return new Promise((resolve) =>{
    setTimeout(() => resolve('Done!'), 1000);
  });
}

async function run(){
  const result = await fetchData();
  console.log(result); // Done!
}
run();
```

---

## тЪб ржЖржкржирж╛рж░ ржЬржирзНржп рж╕ржорзНржкрзВрж░ржХ ржкрзНрж░рж╢рзНржирзЗрж░ рждрж╛рж▓рж┐ржХрж╛ (ржкрзНрж░рждрж┐ржЯрж┐ ржЙрждрзНрждрж░+ржЙржжрж╛рж╣рж░ржгрж╕рж╣ ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ ржмрж▓рждрзЗ ржкрж╛рж░рзЗржи):

* Hoisting & TDZ (Temporal Dead Zone)
* Call, Apply, Bind
* Event bubbling & capturing ржПрж░ ржоржзрзНржпрзЗ ржкрж╛рж░рзНржержХрзНржп
* Prototype vs **proto**
* ES6 рдлреАржЪрж╛рз░рж╕ржорзВрж╣ (Destructuring, Spread/Rest, Template literals)
* Deep vs Shallow copy
* Debounce ржУ Throttle
* Cross-Origin(Resource Sharing - CORS) ржХрзА?
* Memory leak ржХрзАржнрж╛ржмрзЗ ржШржЯрзЗ JSтАСрждрзЗ?
* Garbage Collection ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
* Webpack/Babel ржХрзА? ржПрж░ рж╕рзБржмрж┐ржзрж╛ ржХрзА?
* Modules тАУ CommonJS vs ES6 modules
* Fetch vs XMLHttpRequest
* WebStorage (localStorage/sessionStorage) ржХрзА?
* WebWorker ржХрзА?
* Single-threaded nature ржЖрж░ржУ ржЕржирзЗржХ ржмрж┐рж╖рзЯрж╕рж╣...

---

ЁЯСЙ **ржкрж░ржмрж░рзНрждрзАрждрзЗ ржпржжрж┐ ржЪрж╛ржи**:

* ржирж┐рзЯржорж┐ржд ржзрж╛рж░рж╛ржмрж╛рж╣рж┐ржХрзЗ Q\&A ржжрзЗржУржпрж╝рж╛
* ржХрзЛржирзЛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрж┐рж╖рзЯ (ржпрзЗржоржи Closure, Asynchronous JS) ржЧрж╛ржЗржб
* ржмрж╛ржВрж▓рж╛ ржЙржжрж╛рж╣рж░ржг ржХрж┐ржВржмрж╛ ржХрзЛржб ржирж┐ржпрж╝рзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЯрзНрж░рзЗржирж┐ржВ

ржЖржкржирж┐ ржХрзЛржиржЧрзБрж▓рзЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЪрж╛ржи? ржмрж╛ ржЕржирзНржп ржХрзЛржирзЛ ржзрж░ржирзЗ present ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ ржЬрж╛ржирж╛ржмрзЗржитАФржЖржорж┐ рж╕рж╛ржЬрж┐рзЯрзЗ ржжрзЗржмрзЛ ЁЯТб



ржЪржорзОржХрж╛рж░! рждрж╛рж╣рж▓рзЗ ржирж┐ржЪрзЗ ржЕржЧрзНрж░рж┐ржо ржзрж╛рж░рж╛рзЯ ржЖрж░рзЛ ржХрж┐ржЫрзБ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг JS ржЗржирзНржЯрж╛рж░ржнрж┐ржЙ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░ ржУ ржЙржжрж╛рж╣рж░ржг ржжрж┐ржЪрзНржЫрж┐:

---

## ЁЯФ╣ рззрзз. Call, Apply, Bind

**ржЙрждрзНрждрж░**:

* `.call(thisArg, arg1, arg2тАж)`: ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рзЗ ржмрзЗржБржзрзЗ ржжрзЗржУрзЯрж╛ `this` ржжрж┐рзЯрзЗред
* `.apply(thisArg, [argsArray])`: arguments ржЕрзНржпрж╛рж░рзЗ рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯред
* `.bind(thisArg, arg1, тАж)`: ржирждрзБржи ржлрж╛ржВрж╢ржи рждрзИрж░рж┐ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ `this`тАУрж╕рж╣; ржкрж░рзЗ ржХрж▓ ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function say(greeting){
  console.log(greeting + ', ' + this.name);
}
const person = { name: 'Karim' };
say.call(person, 'Hello');     // Hello, Karim
say.apply(person, ['Hi']);     // Hi, Karim
const bound = say.bind(person, 'Hey');
bound();                       // Hey, Karim
```

---

## ЁЯФ╣ рззрзи. Debounce vs Throttle

**ржЙрждрзНрждрж░**:

* **Debounce**: ржЗржнрзЗржирзНржЯ рж╢рзЗрж╖ рж╣ржУрзЯрж╛рж░ ржкрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржорзЯ ржкрж░ callback ржПржХржмрж╛рж░ржЗ ржЪрж╛рж▓рж╛рзЯред
* **Throttle**: ржЗржнрзЗржирзНржЯ ржЪрж▓рж╛ржХрж╛рж▓рзАржи ржкрзНрж░рждрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржорзЯ ржЕржирзНрждрж░ callback ржЪрж╛рж▓рж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function debounce(fn, delay){
  let timer;
  return function(...args){
    clearTimeout(timer);
    timer = setTimeout(() => fn.apply(this, args), delay);
  };
}

function throttle(fn, limit){
  let last;
  return function(...args){
    if(!last || Date.now() - last >= limit){
      fn.apply(this, args);
      last = Date.now();
    }
  };
}
```

---

## ЁЯФ╣ рззрзй. Deep copy vs Shallow copy

**ржЙрждрзНрждрж░**:

* **Shallow copy**: рж╢рзБржзрзБржорж╛рждрзНрж░ ржкрзНрж░ржержо рж▓рзЗржнрзЗрж▓рзЗрж░ ржХржкрж┐ рж╣рзЯ; nested object рждржЦржи рж░рзЗржлрж╛рж░рзЗржирзНрж╕ ржзрж░рзЗред
* **Deep copy**: nested рж╕ржм ржЕржмржЬрзЗржХрзНржЯ ржирждрзБржи ржХрж░рзЗ ржХржкрж┐ рж╣рзЯ, рж╕ржорзНржкрзВрж░рзНржг ржЖрж▓рж╛ржжрж╛ред

**ржЙржжрж╛рж╣рж░ржг**:

```js
const obj = { a:1, b: { c:2 } };
const shallow = { ...obj };
shallow.b.c = 3;
console.log(obj.b.c); // 3 тАФ ржПржХржЗ nested object

const deep = JSON.parse(JSON.stringify(obj));
deep.b.c = 4;
console.log(obj.b.c); // 3 тАФ ржорзВрж▓ ржЕржмржЬрзЗржХрзНржЯ ржЕржиржирзБржорзЛржжрж┐ржд ржирж╛
```

---

## ЁЯФ╣ рззрзк. Event bubbling ржУ capturing

**ржЙрждрзНрждрж░**:

* **Bubbling**: ржЗржнрзЗржирзНржЯ child ржерзЗржХрзЗ рж╕рзЛржЬрж╛ ьШмыЭ╝ ржпрж╛рзЯ parentтАСрждрзЗред
* **Capturing**: parent ржерзЗржХрзЗ ржкрзНрж░ржержорзЗ ржирж┐ржЪрзЗ ржЖрж╕рзЗ childтАСрждрзЗред

**ржЙржжрж╛рж╣рж░ржг**:

```js
parent.addEventListener('click', fn1, true);  // capturing
child.addEventListener('click', fn2);         // bubbling default
```

---

## ЁЯФ╣ рззрзл. ES6 ржлрж┐ржЪрж╛рж░рж╕ржорзВрж╣

* **Destructuring**:

```js
const [x, y] = [1, 2];
const { name, age } = { name:'Rahim', age:30 };
```

* **Spread/Rest**:

```js
const arr = [1,2,3];
const newArr = [...arr,4];
function sum(...nums){ return nums.reduce((a,b)=>a+b); }
```

* **Template literals**:

```js
console.log(`Hello ${name}, you are ${age} years old.`);
```

---

## ЁЯФ╣ рззрзм. Module system: CommonJS vs ES6

* **CommonJS**: Node.jsтАУржП `require`, `module.exports` ржжрж┐рзЯрзЗред
* **ES6 modules**: ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржУ рж░рж┐ржирзНрждрзЗ `import/export` ржжрж┐рзЯрзЗред

**ржЙржжрж╛рж╣рж░ржг**:

```js
// CommonJS
const utils = require('./utils');
module.exports = { foo };

// ES6
import { foo } from './utils.js';
export function bar() { ... }
```

---

## ЁЯФ╣ рззрзн. WebStorage: localStorage ржУ sessionStorage

* **localStorage**: ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржмржирзНржз рж╣рзЯрзЗ ржЧрзЗрж▓рзЗ ржбрзЗржЯрж╛ ржерзЗржХрзЗ ржпрж╛рзЯред
* **sessionStorage**: рж╢рзБржзрзБржорж╛рждрзНрж░ ржкрзЗржЬ session ржкрж░рзНржпржирзНржд ржерж╛ржХрзЗ; ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржЯрзНржпрж╛ржм ржмржирзНржз ржХрж░рж▓рзЗ ржорзБржЫрзЗ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
localStorage.setItem('user', 'Alia');
console.log(localStorage.getItem('user'));

sessionStorage.setItem('token', 'abc123');
sessionStorage.removeItem('token');
```

---

## ЁЯФ╣ рззрзо. Fetch vs XMLHttpRequest

* **XHR**: ржкрзБрж░ржирзЛ ржкржжрзНржзрждрж┐, callbackтАСbasedред
* **Fetch**: PromiseтАСbased, ржХрзЛржб ржкрзЬрждрзЗ рж╕рж╣ржЬ, `Response` & `Request` objectsред

**ржЙржжрж╛рж╣рж░ржг**:

```js
fetch('https://api.example.com/data')
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error(err));
```

---

## ЁЯФ╣ рззрзп. Garbage Collection ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?

**ржЙрждрзНрждрж░**: JS engine (ржпрзЗржоржи V8) reference counting, mark-and-sweep ржЯрзЗржХржирж┐ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ unused ржорзЗржорж░рж┐ рж╕рж░рж┐рзЯрзЗ ржжрзЗрзЯред

---

## ЁЯФ╣ рзирзж. Memory leak ржХрзАржнрж╛ржмрзЗ ржШржЯрзЗ?

**ржЙрждрзНрждрж░**: ржпржЦржи ржЕржмржЬрзЗржХрзНржЯ ржЖрж░ ржмрзНржпржмрж╣рж╛рж░ ржирж╛ рж╣рж▓рзЗржУ рждрж╛ GC ржерзЗржХрзЗ рж░ржХрзНрж╖рж╛ ржкрж╛рзЯ, ржпрзЗржоржи: unintended global variables, forgotten timers, detached DOM nodes ржЗрждрзНржпрж╛ржжрж┐ред

---

## ЁЯФ╣ рзирзз. Polyfills & Transpilers (Babel/Webpack)

* **Polyfills**: ржирждрзБржи ржлрж┐ржЪрж╛рж░ ржкрзБрж░ржирзЛ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржЖржирж╛рж░ ржЬржирзНржпред
* **Transpiler**: ES6+ ржХрзЛржб ES5тАСржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ (ржпрзЗржоржи Babel)ред
* **Bundle tool**: Webpack, RollupтАУржПрж░ ржорждрзЛ ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ combine ржУ optimize ржХрж░рзЗред

---

## ЁЯФ╣ рзирзи. WebWorker ржХрзА?

**ржЙрждрзНрждрж░**: JS-ржПрж░ background thread run ржХрж░рж╛рж░ ржЬржирзНржп Web API; heavy computation page freeze ржирж╛ ржХрж░рзЗржЗ ржЪрж╛рж▓рж╛ржирзЛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
// main.js
const worker = new Worker('worker.js');
worker.postMessage('Start');
worker.onmessage = e => console.log('Result:', e.data);

// worker.js
onmessage = function(e){
  const result = heavyCalc();
  postMessage(result);
}
```

---

## ЁЯФ╣ рзирзй. Single-threaded nature ржУ Event Loop

**ржЙрждрзНрждрж░**: JS single-threaded рж╣рж▓рзЗржУ asynchronous ржХрж╛ржЬ рж╣рзЯ event loopтАУржПрж░ ржорж╛ржзрзНржпржорзЗ; callback, promises, micro/macroтАСtasks scheduling ржПрж░ ржорж╛ржзрзНржпржорзЗ concurrent behavior рж╣рзЯред

---

## ЁЯФ╣ рзирзк. CORS ржХрзА?

Cross-Origin Resource Sharing ржПржХржЯрж┐ ржирж┐рж░рж╛ржкрждрзНрждрж╛ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп, ржпрзЗ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржПржХржЯрж┐ web page ржЕржирзНржп domain ржерзЗржХрзЗ resource fetch ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ server ржмрж╛ржзрзНржпржоржд ржирж┐рж░рзНржжрж┐рж╖рзНржЯ header (e.g. `Access-Control-Allow-Origin`) ржжрж┐рждрзЗ рж╣ржпрж╝ред

---

### ЁЯЪА ржкрж░ржмрж░рзНрждрзА ржзрж╛ржк:

ржЖрж░ржУ Q\&A ржЪрж╛ржи? ржирж┐ржЪ ржЖрзЯрж░рж╛рзЯ ржЖржкржирж┐ ржХрзЛржиржЧрзБрж▓рзЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЪрж╛ржи?

* тнР Async JavaScript (Callbacks, Promises, async/await)
* ЁЯзй Testing (Unit testing, Jest)
* тЪЫя╕П Framework-specific JS (React/Vue)
* ЁЯза Algorithms & Data Structures
* ЁЯТб Design Patterns (Module, Factory, Singleton)
* ЁЯФТ Security (XSS, CSRF, OWASP rules)

ржмрж▓рзБржитАФржкрж░ржмрж░рзНрждрзА ржЖрж░рзЗржХржЯрж┐ рззрзж+ ржкрзНрж░рж╢рзНржи ржЙржжрж╛рж╣рж░ржг ржУ ржмрзНржпрж╛ржЦрзНржпрж╛ ржирж┐рзЯрзЗ ржжрзЗржмрзЛред




ржмрж╛рж╣, ржжрж╛рж░рзБржг! рждрж╛рж╣рж▓рзЗ ржЖрж░ржУ рззрзжржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг JavaScript ржЗржирзНржЯрж╛рж░ржнрж┐ржЙ ржкрзНрж░рж╢рзНржи рж╕ржВржХрзНрж╖рж┐ржкрзНржд ржХрж░рзЗ ржЙрждрзНрждрж░ ржУ ржЙржжрж╛рж╣рж░ржгрж╕рж╣ ржжрж┐ржЪрзНржЫрж┐тАФрж╕ржмржЗ ржмрж╛ржВрж▓рж╛рзЯ ЁЯза

---

## ЁЯФ╣ рзирзл. Callback vs Promise vs Async/Await

**ржЙрждрзНрждрж░**:

* **Callback**: asynchronous function ржкрж░рзЗржУ ржХрж▓ржмрзНржпрж╛ржХ ржпрж╛ржпрж╝, but callback hell рж╣рждрзЗ ржкрж╛рж░рзЗред
* **Promise**: clearer syntax, `then`/`catch`, chaining рж╕рж╣ржЬред
* **Async/Await**: ржзрж░рж╛ ржмрзЛржЭрж╛рж░ ржХрзЛржб рж╕рзНржЯрж╛ржЗрж▓, `try/catch` ржжрж┐рзЯрзЗ error handlingред

**ржЙржжрж╛рж╣рж░ржг**:

```js
// Callback
fs.readFile('file.txt', (err, data) => {
  if(err) return console.error(err);
  console.log(data);
});

// Promise
readFilePromise('file.txt')
  .then(data => console.log(data))
  .catch(err => console.error(err));

// Async/Await
async function load(){
  try{
    const data = await readFilePromise('file.txt');
    console.log(data);
  } catch(err){
    console.error(err);
  }
}
load();
```

---

## ЁЯФ╣ рзирзм. Promise chaining and error handling

**ржЙрждрзНрждрж░**: ржПржХрж╛ржзрж┐ржХ asynchronous ржХрж╛ржЬ ржПржХрж╕рж╛ржерзЗ ржХрж░рждрзЗ рж╕рж╣ржЬрзЗ ржЪрзЗржЗржи ржХрж░рж╛ ржпрж╛ржпрж╝, ржЖрж░ рж╢рзЗрж╖рзЗ centralized error catch ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
doFirst()
  .then(result => doSecond(result))
  .then(result2 => doThird(result2))
  .then(final => console.log(final))
  .catch(err => console.error('Error:', err));
```

---

## ЁЯФ╣ рзирзн. Map vs Set vs WeakMap vs WeakSet

**ржЙрждрзНрждрж░**:

* **Map**: key-value store, ржХрзЛржирзЛ type key ржжрж┐рждрзЗ ржкрж╛рж░рзЗржиред
* **WeakMap**: key рж╢рзБржзрзБржорж╛рждрзНрж░ object, ржПржмржВ garbage-collected рж╣ржпрж╝ ржпржЦржи ржЖрж░ reference ржирж╛ ржерж╛ржХрзЗред
* **Set**: unique value collectionред
* **WeakSet**: рж╢рзБржзрзБржорж╛рждрзНрж░ object stored, garbage-collectedред

**ржЙржжрж╛рж╣рж░ржг**:

```js
const map = new Map();
map.set(1, 'one');

const set = new Set([1,2,2]); // {1,2}
```

---

## ЁЯФ╣ рзирзо. Generators & Iterators

**ржЙрждрзНрждрж░**: Generators (function\*) ржХрзНрж░ржорж╛ржЧржд yield ржХрж░рзЗ value ржирж┐ржпрж╝рзЗ suspend ржХрж░рждрзЗ ржкрж╛рж░рзЗред Iterators рж╣ржЪрзНржЫрзЗ objects ржпрж╛ sequence ржерзЗржХрзЗ element ржврзБржХрждрзЗ ржжрзЗрзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function* count(){
  let i = 1;
  while(true){
    yield i++;
  }
}
const gen = count();
console.log(gen.next().value); //1
console.log(gen.next().value); //2
```

---

## ЁЯФ╣ рзирзп. Proxy & Reflect

**ржЙрждрзНрждрж░**: Proxy ржжрж┐рзЯрзЗ object access methods intercept ржХрж░рж╛ ржпрж╛ржпрж╝ (get/set), ржЖрж░ Reflect ржжрж┐рзЯрзЗ default behavior invoke ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг**:

```js
const obj = {a:1};
const proxy = new Proxy(obj, {
  get(target, prop){
    console.log(`Accessing ${prop}`);
    return Reflect.get(target, prop);
  }
});
console.log(proxy.a); // prints log, value 1
```

---

## ЁЯФ╣ рзйрзж. Custom Events & EventEmitter (Node.js)

**ржЙрждрзНрждрж░**: ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ `CustomEvent`, Node.js ржП `EventEmitter` ржжрж┐рзЯрзЗ ржЗржнрзЗржирзНржЯ ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛ ржпрж╛рзЯред

**ржЙржжрж╛рж╣рж░ржг (Node.js)**:

```js
const EventEmitter = require('events');
class MyEmitter extends EventEmitter {}
const emitter = new MyEmitter();
emitter.on('greet', name => console.log('Hello', name));
emitter.emit('greet', 'Rahim'); // Hello Rahim
```

---

## ЁЯФ╣ рзйрзз. Currying

**ржЙрждрзНрждрж░**: ржПржХржЯрж┐ ржлрж╛ржВрж╢ржи ржнрж┐ржирзНржи ржнрж┐ржирзНржи ржЖрж░рзНржЧрзБржорзЗржирзНржЯ ржирж┐ржпрж╝рзЗ ржЕржВрж╢рзЗтАСржЖржВрж╢рзЗ return рж╣рзЯрзЗ ржпрж╛ржпрж╝ред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function add(a){
  return function(b){
    return a + b;
  };
}
const add5 = add(5);
console.log(add5(3)); // 8
```

---

## ЁЯФ╣ рзйрзи. Memoization

**ржЙрждрзНрждрж░**: ржлрж╛ржВрж╢ржирзЗрж░ ржкрзВрж░рзНржмрзЗрж░ ржЖржЙржЯржкрзБржЯ ржЧрзБрж▓рзЛ ржХрзНржпрж╛рж╢ ржХрж░рзЗ performance ржмрж╛рзЬрж╛рзЯ, ржмрж┐рж╢рзЗрж╖ ржХрж░рзЗ expensive opsтАСржПред

**ржЙржжрж╛рж╣рж░ржг**:

```js
function memoize(fn){
  const cache = {};
  return (...args) => {
    const key = JSON.stringify(args);
    if(cache[key]) return cache[key];
    return cache[key] = fn(...args);
  };
}
const slowFib = n => n<2 ? n : slowFib(n-1) + slowFib(n-2);
const fastFib = memoize(slowFib);
console.log(fastFib(40));
```

---

## ЁЯФ╣ рзйрзй. Thunks

**ржЙрждрзНрждрж░**: ржПржХржЯрж┐ ржерж╛ржВржХ рж╣рж▓рзЛ zero-argument ржлрж╛ржВрж╢ржи ржпрж╛ computation ржмрж╛ evaluation deferred ржХрж░рзЗред

**ржЙржжрж╛рж╣рж░ржг**:

```js
const thunk = () => computeHeavy();
if(condition){
  console.log(thunk());
}
```

---

## ЁЯФ╣ рзйрзк. Optional Chaining ╫Х Nullish Coalescing

**ржЙрждрзНрждрж░**:

* `?.` ржжрж┐ржпрж╝рзЗ ржПржоржи nested property-safe access ржХрж░рж╛ ржпрж╛рзЯред
* `??` ржжрж┐рзЯрзЗ default value when null e├░a undefinedред

**ржЙржжрж╛рж╣рж░ржг**:

```js
const user = {};
console.log(user?.profile?.name); // undefined
console.log(null ?? 'Default'); // 'Default'
```

---

## ЁЯФ╣ рзйрзл. Bitwise operations

**ржЙрждрзНрждрж░**: JavaScript ржП bit-level operationsтАФ & , | , ^ , << , >> тАФ ржжрж┐ржпрж╝рзЗ low-level logic ржжрзЗржпрж╝рж╛ ржпрж╛ржпрж╝ред

**ржЙржжрж╛рж╣рж░ржг**:

```js
console.log(5 & 3); // 1   (0101 & 0011 = 0001)
```

---

## ЁЯФ╣ рзйрзм. Designing a module with IIFE

**ржЙрждрзНрждрж░**: ржкрзБрж░ржирзЛржмрж╛рж░рзНржерзЗ рждрзИрж░рж┐ ржХрж░рж╛ module pattern ржпрзЗржЦрж╛ржирзЗ private variables ржмрзНржпржмрж╣рзГржд рж╣рзЯ closure ржжрж┐рзЯрзЗред

**ржЙржжрж╛рж╣рж░ржг**:

```js
const Counter = (function(){
  let count = 0;
  return {
    inc: () => ++count,
    dec: () => --count
  };
})();
console.log(Counter.inc()); //1
```

---

### тЬЕ ржкрж░ржмрж░рзНрждрзА ржкрзНрж▓рзНржпрж╛ржи:

* ржпржжрж┐ ржПржЧрзБрж▓рзЛрж░ ржпрзЗ ржХрзЛржиржУржЯрж┐ ржирж┐ржпрж╝рзЗ ржЖрж░ржУ deep dive ржЪрж╛ржитАФржжрж┐рж▓рзЗржХрж╛рж░ржУ, real-world usages ржмрж╛ coding challenge ржжрж┐рзЯрзЗ ржЖрзЯрждрзНржд ржХрж░рждрзЗ ржкрж╛рж░рзЗред
* ржмрж╛ ржЪрж╛ржи ржЖрж░рзЛ рззрзж-рзирзж ржкрзНрж░рж╢рзНржи: ржпрзЗржоржи tree/graph algorithms in JS, design patterns, testing strategies (Jest, Mocha), performance optimization, secure JS practicesтАФржмрж▓рж▓рзЗржЗ ржкрзЗрждрзЗ ржкрж╛рж░ржмрзЗржи!

ржЖржкржирж┐ ржХрзЛржи ржжрж┐ржХрзЗ ржерж╛ржХрж▓рзЗ рж╕ржмржЪрзЗржпрж╝рзЗ рж╕рж╛рж╣рж╛ржпрзНржп рж╣ржмрзЗ? ЁЯОп
